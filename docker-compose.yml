services:
  # 1. Contenedor de la Base de Datos
  db:
    image: mariadb:10.11 # Funciona con esta versión
    container_name: mariadb_service
    restart: always
    volumes:
      - ./mariadb_data:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${DB_NAME}
      MARIADB_USER: ${DB_USER}
      MARIADB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5306:3306" # Exponer el puerto solo si necesitas acceder desde tu máquina local

  # 2. Contenedor de la Aplicación Web (Django)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: django_web_app
    restart: always
    volumes:
      - ./web:/app  # Mapea tu código local para desarrollo en tiempo real
    command: ["./wait-for-db.sh", "sh", "-c", "python manage.py makemigrations worklog && python manage.py makemigrations clients &&python manage.py makemigrations accounts && python manage.py makemigrations core && python manage.py migrate && python create_superuser.py && python manage.py runserver 0.0.0.0:8000"]
    ports:
      - "5800:8000"
    env_file:
      - ./.env
    environment:
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      DJANGO_SUPERUSER_PASSWORD: admin123
    depends_on:
      - db # No intentes iniciar la web hasta que la base de datos esté lista

  # 3. Contenedor del Bot de Telegram
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: telegram_bot
    restart: always
    volumes:
      - ./bot:/app
      - ./web/media/worklog_audios:/app/audio_uploads  # Carpeta compartida entre web y bot
      - ./web:/app/web  # <--- este monta el código Django dentro del contenedor del bot
    command: ["./wait-for-db.sh", "python", "bot.py"]
    env_file:
      - ./.env
    depends_on:
      - db # El bot también puede depender de la base de datos